// Mocks generated by Mockito 5.4.6 from annotations
// in inventory_management/test/report_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:inventory_management/domain/entities/add_material_params.dart'
    as _i10;
import 'package:inventory_management/domain/entities/add_production_log_params.dart'
    as _i5;
import 'package:inventory_management/domain/entities/material.dart' as _i2;
import 'package:inventory_management/domain/entities/product_material_mapping.dart'
    as _i8;
import 'package:inventory_management/domain/entities/production_log.dart'
    as _i6;
import 'package:inventory_management/domain/repositories/material_repository.dart'
    as _i9;
import 'package:inventory_management/domain/repositories/product_material_repository.dart'
    as _i7;
import 'package:inventory_management/domain/repositories/production_log_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMaterial_0 extends _i1.SmartFake implements _i2.Material {
  _FakeMaterial_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IProductionLogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProductionLogRepository extends _i1.Mock
    implements _i3.IProductionLogRepository {
  MockIProductionLogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addProductionLog(_i5.AddProductionLogParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProductionLog,
          [params],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.ProductionLog>> getProductionLogs(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductionLogs,
          [
            start,
            end,
          ],
        ),
        returnValue:
            _i4.Future<List<_i6.ProductionLog>>.value(<_i6.ProductionLog>[]),
      ) as _i4.Future<List<_i6.ProductionLog>>);

  @override
  _i4.Future<List<_i6.ProductionLog>> getProductionLogsForProduct(
    int? productId,
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductionLogsForProduct,
          [
            productId,
            start,
            end,
          ],
        ),
        returnValue:
            _i4.Future<List<_i6.ProductionLog>>.value(<_i6.ProductionLog>[]),
      ) as _i4.Future<List<_i6.ProductionLog>>);
}

/// A class which mocks [IProductMaterialRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProductMaterialRepository extends _i1.Mock
    implements _i7.IProductMaterialRepository {
  MockIProductMaterialRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i8.ProductMaterialMapping>> getMappingsForProduct(
          int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMappingsForProduct,
          [productId],
        ),
        returnValue: _i4.Future<List<_i8.ProductMaterialMapping>>.value(
            <_i8.ProductMaterialMapping>[]),
      ) as _i4.Future<List<_i8.ProductMaterialMapping>>);

  @override
  _i4.Stream<List<_i8.ProductMaterialMapping>> watchMappingsForProduct(
          int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchMappingsForProduct,
          [productId],
        ),
        returnValue: _i4.Stream<List<_i8.ProductMaterialMapping>>.empty(),
      ) as _i4.Stream<List<_i8.ProductMaterialMapping>>);

  @override
  _i4.Future<void> addMapping(_i8.ProductMaterialMapping? mapping) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMapping,
          [mapping],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> removeMapping(
    int? productId,
    int? materialId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMapping,
          [
            productId,
            materialId,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [IMaterialRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIMaterialRepository extends _i1.Mock
    implements _i9.IMaterialRepository {
  MockIMaterialRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Material>> getMaterials() => (super.noSuchMethod(
        Invocation.method(
          #getMaterials,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Material>>.value(<_i2.Material>[]),
      ) as _i4.Future<List<_i2.Material>>);

  @override
  _i4.Stream<List<_i2.Material>> watchMaterials() => (super.noSuchMethod(
        Invocation.method(
          #watchMaterials,
          [],
        ),
        returnValue: _i4.Stream<List<_i2.Material>>.empty(),
      ) as _i4.Stream<List<_i2.Material>>);

  @override
  _i4.Future<int> addMaterial(_i10.AddMaterialParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMaterial,
          [params],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> updateMaterial(_i2.Material? material) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMaterial,
          [material],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> deleteMaterial(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMaterial,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<_i2.Material> getMaterialById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMaterialById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Material>.value(_FakeMaterial_0(
          this,
          Invocation.method(
            #getMaterialById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Material>);
}
